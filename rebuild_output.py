"""Run all experiments and rebuild result summaries to embed in readme.md.

This project is a demo of a self-optimizing genetic algorithm. The readme file
contains an overview of the experiment's purpose, design, and results. The
graphs, images, and videos referenced by the readme are all produced by running
this script and stored in the output directory.

Here is an overview of the files generated by this script:
- output
    - compare_phenotypes
        - <fitness_goal>
            * <genome_config>_fitness.png
            * <genome_config>_best.gif
            * summary.png
        - simulation_videos
            * <simulation_id>_run.gif
        * experiment_data.pickle
TODO: Document the outer loop experiments.
"""

import os
import pickle
import random
import statistics

import matplotlib.pyplot as plt
import numpy as np

import experiments
import genome
import gol_simulation


def make_title(name):
    """Format a camel case name string as a display title."""
    return name.replace('_', ' ').title()


def genome_config_samples():
    """Save samples of phenotypes made with different genome configurations."""
    path = 'output/genome_config_samples'
    if os.path.exists(path):
        return
    os.makedirs(path)
    sample_dict = {}
    flat_samples = []
    for genome_name, genome_config in genome.EXPERIMENT_CONFIGS.items():
        new_samples = [
            gol_simulation.GameOfLifeSimulation(genome.Genotype(genome_config))
            for _ in range(6)]
        sample_dict[genome_name] = new_samples
        flat_samples.extend(new_samples)
    gol_simulation.simulate(flat_samples, [0])
    for genome_name, samples in sample_dict.items():
        for index, simulation in enumerate(samples):
            simulation.save_video(f'{path}/{genome_name}_{index}.gif')


def compare_phenotypes():
    """Compare the performance of genome configurations on fitness goals."""
    path = 'output/compare_phenotypes'
    os.makedirs(path, exist_ok=True)
    pickle_filename = f'{path}/experiment_data.pickle'
    experiment_data = {}
    if os.path.exists(pickle_filename):
        print('Loading cached experiment data.')
        with open(pickle_filename, 'rb') as file:
            experiment_data = pickle.load(file)
    else:
        experiment_data, sample_simulations = experiments.compare_phenotypes()
        videos_path = f'{path}/simulation_videos'
        os.makedirs(videos_path, exist_ok=True)
        gol_simulation.record_videos(sample_simulations, videos_path)
        with open(pickle_filename, 'wb') as file:
            pickle.dump(experiment_data, file)

    generations = list(range(experiments.NUM_SIMULATION_GENERATIONS))

    for fitness_name, fitness_data in experiment_data.items():
        os.makedirs(f'{path}/{fitness_name}', exist_ok=True)

        fitness_summary_fig = plt.figure(figsize=(6, 3))
        fitness_summary_fig.suptitle(
            f'Phenotype Performance for {make_title(fitness_name)}')
        regression_axis = fitness_summary_fig.add_subplot(1, 2, 1)
        regression_axis.set_title('Median Fitness Trajectory')

        for genome_name, genome_data in fitness_data.items():
            trial_series = genome_data['trials']
            best_id = genome_data['best_id']

            # Add symbolic links from the trial data to simulation videos.
            target_name = f'../simulation_videos/{best_id}_run.gif'
            link_name = f'{path}/{fitness_name}/{genome_name}_best.gif'
            if os.path.exists(link_name):
                os.remove(link_name)
            os.symlink(target_name, link_name)

            # Generate a chart of all trials in this configuration.
            trials_fig = plt.figure()
            trials_fig.suptitle(
                f'{make_title(fitness_name)} x {make_title(genome_name)}')
            axis = trials_fig.add_subplot()
            for trial_index, data_series in enumerate(trial_series):
                axis.plot(generations, data_series,
                          label=f'Trial {trial_index + 1}')
            axis.legend()
            trials_fig.savefig(
                f'{path}/{fitness_name}/{genome_name}_fitness.png')

            # Generate a chart comparing median fitness trajectories
            median_fitness_series = list(
                map(statistics.median, zip(*trial_series)))
            median_slope, median_intercept = statistics.linear_regression(
                generations, median_fitness_series)
            median_regression_series = [
                median_intercept + x * median_slope for x in generations]
            regression_axis.plot(
                generations, median_regression_series,
                label=make_title(genome_name))
            regression_axis.legend()

        # Generate a boxplot summarizing max fitness across trials.
        max_fitness = [
            list(map(max, genome_data['trials'])) for genome_data in
            fitness_data.values()]
        fitness_axis = fitness_summary_fig.add_subplot(1, 2, 2)
        fitness_axis.set_title('Best Fitness Across Trials')
        labels = [make_title(name) for name in fitness_data.keys()]
        fitness_axis.boxplot(max_fitness, labels=labels)
        fitness_summary_fig.savefig(f'{path}/{fitness_name}/summary.png')
        plt.close('all')


def evolve_genome_configuration(sane_defaults, genome_fitness_func):
    func_name = make_title(genome_fitness_func.__name__)
    path = f'output/evolve_genome_configuration/{sane_defaults} x {func_name}'
    os.makedirs(path, exist_ok=True)
    pickle_filename = f'{path}/experiment_data.pickle'
    experiment_data = {}
    if os.path.exists(pickle_filename):
        print('Loading previous trial data.')
        with open(pickle_filename, 'rb') as file:
            experiment_data = pickle.load(file)
    else:
        result = experiments.evolve_genome_config(
            sane_defaults, genome_fitness_func)
        experiment_data, best_genome_config, best_simulation = result
        videos_path = f'{path}/simulation_videos'
        os.makedirs(videos_path, exist_ok=True)
        gol_simulation.record_videos([best_simulation], videos_path)
        with open(pickle_filename, 'wb') as file:
            pickle.dump(experiment_data, file)
        with open(f'{path}/best_genome_config.pickle', 'wb') as file:
            pickle.dump(best_genome_config, file)

    generations = list(range(experiments.NUM_GENOME_GENERATIONS))
    fig = plt.figure()
    for fitness_name, fitness_series in experiment_data.items():
        axis = fig.add_subplot()
        axis.plot(generations, fitness_series, label=make_title(fitness_name))
        axis.legend()
    fig.savefig(f'{path}/summary.png')
    plt.close('all')


def main():
    """Actually rebuild all the files in the output directory."""
    # This project uses Python's RNG for almost everything, but there are a few
    # operations in the gene_types module that get a major performance boost
    # from using Numpy's RNG instead. We want pseudo-random behavior, but we
    # also want consistent output from run to run to facilitate debugging, so
    # we seed both RNGs before running the experiments.
    np.random.seed(42)
    random.seed(42)
    # Capture sample phenotypes to help explain what the genome configurations
    # do and what the experiments are actually testing.
    # TODO: Re-enable
    # genome_config_samples()
    # Run the phase one experiments, comparing the performance of all the
    # predefined genome configurations on all the fitness goals.
    # TODO: Re-enable
    # compare_phenotypes()
    # TODO: Figure out the phase two experiments.
    for sane_defaults in (True, False):
        for genome_fitness_func in experiments.GENOME_FITNESS_FUNCTIONS:
            evolve_genome_configuration(sane_defaults, genome_fitness_func)


if __name__ == '__main__':
    main()
