'''Run all experiments and rebuild result summaries to embed in readme.md.

This project is a demo of a self-optimizing genetic algorithm. The readme file
contains an overview of the experiment's purpose, design, and results. The
graphs, images, and videos referenced by the readme are all produced by running
this script and stored in the output directory.

Here is an overview of the files generated by this script:
- output
    - single_fitness
        * <organism>_genotype.gif
        * <organism>_run.gif
        * stats.csv
        * geneology.csv
    - gauntlet
        * <organism>_genotype.gif
        * <organism>_run.gif
        * stats.csv
        * geneology.csv
'''

import os
import random
from log import Logger
import config
import fitness
import genome
import kernel
import multiverse


POPULATION_SIZE = kernel.NUM_SIMS


def log_results(best_organisms, logger, path):
    '''Log experiment results to the filestystem.

    Records the simulated lives of best_organisms as gif videos and dumps all
    log data to CSV files.
    '''
    os.makedirs(path, exist_ok=True)
    # For performance reasons, we only record videos of the most fit
    # organisms found by the GA. Now that we've identified the best
    # organisms from each configuration, run their simulated lives one more
    # time to capture video.
    logger.record_video = True
    multiverse.simulate(best_organisms, logger)
    for organism in best_organisms:
        # Log data for the most fit organism in each configuration.
        logger.export_genotype_video(
            organism.identifier,
            f'{path}/{organism.identifier:08d}_genotype.gif')
        logger.export_simulation_video(
            organism.identifier,
            f'{path}/{organism.identifier:08d}_run.gif')

    # Log stats and geneology data for all the experiments in this run.
    # Bundling them together makes it easier to compare data across
    # configurations and fitness functions.
    logger.export_stats(f'{path}/stats.csv')
    logger.export_geneology(f'{path}/geneology.csv')
    # TODO: export graphs for inclusion in the readme.


def do_single_fitness_runs():
    '''Run all the experiment configurations against the default fitness goals.
    '''
    logger = Logger()
    best_organisms = []
    for fitness_config in fitness.DEFAULT_GOALS:
        for reproduction_config in list(config.ReproductionConfig):
            for phenotype_config in list(config.PhenotypeConfig):
                # For each configuration, get a randomized starting population
                # and evolve it to find the most fit organism.
                genotypes = genome.get_diverse_genotypes(
                    reproduction_config, phenotype_config, POPULATION_SIZE)
                experiment_config = config.ExperimentConfig(
                    reproduction_config, phenotype_config, fitness_config)
                print(experiment_config)
                logger.log_experiment(experiment_config)
                simulator = multiverse.MultiverseSimulator()
                simulator.evolve(genotypes, experiment_config, logger)
                best_organisms.append(simulator.best_organism)
    log_results(best_organisms, logger, 'output/single_fitness')


def do_gauntlet_run():
    '''Run some experiment configurations against a sequence of fitness goals.
    '''
    logger = Logger()
    best_organisms = []
    phenotype_config = config.PhenotypeConfig.BOTH
    for reproduction_config in list(config.ReproductionConfig):
        # For the gauntlet run, we make one initial population per
        # configuration and we keep that population across many fitness goals.
        genotypes = genome.get_diverse_genotypes(
            reproduction_config, phenotype_config, POPULATION_SIZE)

        for fitness_config in fitness.ALL_GOALS:
            # Try evolving the current set of genotypes with the current
            # configuration and fitness function, then find the most fit
            # organism.
            experiment_config = config.ExperimentConfig(
                reproduction_config, phenotype_config, fitness_config)
            print(experiment_config)
            logger.log_experiment(experiment_config)
            simulator = multiverse.MultiverseSimulator()
            simulator.evolve(genotypes, experiment_config, logger)
            best_organisms.append(simulator.best_organism)

            # Capture the genotypes form the last generation in this experiment
            # to use as the genotypes for the first generation in the next one.
            genotypes = [organism.genotype for organism in simulator.organisms]
    log_results(best_organisms, logger, 'output/gauntlet')


random.seed(42)
do_single_fitness_runs()
# do_gauntlet_run()
